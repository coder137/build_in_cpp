name: CMake

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: System Packages
        run: |
          sudo apt-get install ninja-build

      - name: Check environment
        run: |
          cmake --version
          gcc --version
          clang --version
          ninja --version

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        # run: cmake -B ${{github.workspace}}/build -G Ninja -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        run: |
          cmake --list-presets
          cmake --preset=gcc_dev_all

      - name: Build
        # Build your program with the given configuration
        # Linux has 2 cores
        # run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel 2
        run: |
          cmake --build --list-presets
          cmake --build --preset=gcc_dev_all --parallel 2

      - name: Test
        run: |
          ctest --preset=gcc_dev_all --parallel 2
