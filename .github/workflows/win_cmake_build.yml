name: Windows CMake build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  BUILD_PRESET: msvc_dev_all
  BUILD_FOLDER_DEV_ALL: _build_msvc_dev_all

jobs:
  build_all:
    name: BuildCC single and interface Lib
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Check environment
        run: |
          cmake --version
          gcc --version
          clang --version
          ninja --version
          doxygen --version
          gcovr --version
          lcov --version
          cppcheck --version
          clang-tidy --version

      - name: Configure CMake
        run: |
          cmake --list-presets
          cmake --preset=${{env.BUILD_PRESET}}

      - name: Static Analysis
        working-directory: ${{github.workspace}}/${{env.BUILD_FOLDER_DEV_ALL}}
        run: cmake --build . --target cppcheck_static_analysis

      - name: Build
        # Linux has 2 cores
        run: |
          cmake --build --list-presets
          cmake --build --preset=${{env.BUILD_PRESET}} --parallel 2

      - name: Test
        run: |
          ctest --preset=${{env.BUILD_PRESET}} --parallel 2

      - name: Install
        working-directory: ${{github.workspace}}/${{env.BUILD_FOLDER_DEV_ALL}}
        run: |
          sudo cmake --install .

      - name: AfterInstall Example
        working-directory: ${{github.workspace}}/example/gcc/AfterInstall
        run: |
          cmake -B build -G Ninja
          cmake --build build --parallel 2
          cd build
          ./build

      - name: Hybrid Simple Example
        working-directory: ${{github.workspace}}/${{env.BUILD_FOLDER_DEV_ALL}}
        run: |
          cmake --build . --target run_hybrid_simple_example_linux

      - name: Hybrid Foolib Example
        working-directory: ${{github.workspace}}/${{env.BUILD_FOLDER_DEV_ALL}}
        run: |
          cmake --build . --target run_hybrid_foolib_example_linux

      - name: Hybrid External Lib Example
        working-directory: ${{github.workspace}}/${{env.BUILD_FOLDER_DEV_ALL}}
        run: |
          cmake --build . --target run_hybrid_externallib_example_linux

      - name: Hybrid Custom Target Example
        working-directory: ${{github.workspace}}/${{env.BUILD_FOLDER_DEV_ALL}}
        run: |
          cmake --build . --target run_hybrid_customtarget_example_linux

      - name: Hybrid Generic Target Example
        working-directory: ${{github.workspace}}/${{env.BUILD_FOLDER_DEV_ALL}}
        run: |
          cmake --build . --target run_hybrid_generic_example
